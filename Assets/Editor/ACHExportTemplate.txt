using UnityEngine;
using System.Collections;
using System.IO;
using System.Text;
using UnityEditor;
using System.Xml.Serialization;
using NPOI.HSSF.UserModel;
using NPOI.SS.UserModel;

public class $ExportTemplate$ : AssetPostprocessor {
	private static readonly string filePath = "$IMPORT_PATH$";
	private static readonly string exportPath = "$EXPORT_PATH$";
	private static readonly string[] sheetNames = { $SheetList$ };

    private static readonly string IDTypeFilePath = "$ID_TYPE_FILE_PATH$";
    private static readonly string dataType = "$DATA_TYPE$";

	static void OnPostprocessAllAssets (string[] importedAssets, string[] deletedAssets, string[] movedAssets, string[] movedFromAssetPaths)
	{
		foreach (string asset in importedAssets) {
			if (!filePath.Equals (asset))
				continue;
				
			$ExcelData$ data = ($ExcelData$)AssetDatabase.LoadAssetAtPath (exportPath, typeof($ExcelData$));
			if (data == null) {
				data = ScriptableObject.CreateInstance<$ExcelData$> ();
				AssetDatabase.CreateAsset ((ScriptableObject)data, exportPath);
				data.hideFlags = HideFlags.NotEditable;
			}
			
			data.sheets.Clear ();
			using (FileStream stream = File.Open (filePath, FileMode.Open, FileAccess.Read)) {
				IWorkbook book = new HSSFWorkbook (stream);
				
				foreach(string sheetName in sheetNames) {
					ISheet sheet = book.GetSheet(sheetName);
					if( sheet == null ) {
						Debug.LogError("[Data] sheet not found:" + sheetName);
						continue;
					}

					$ExcelData$.Sheet s = new $ExcelData$.Sheet ();
					s.name = sheetName;
				
					for (int i=1; i< sheet.LastRowNum; i++) {
						IRow row = sheet.GetRow (i);
						ICell cell = null;
						
						$ExcelData$.Param p = new $ExcelData$.Param ();
						$EXPORT_DATA$
						s.list.Add (p);
					}
					data.sheets.Add(s);
				}
			}

			ScriptableObject obj = AssetDatabase.LoadAssetAtPath (exportPath, typeof(ScriptableObject)) as ScriptableObject;
			EditorUtility.SetDirty (obj);

            string IDTypeTemplate = File.ReadAllText(IDTypeFilePath);
            StringBuilder IDTypeBuilder = new StringBuilder();
            foreach(var sheet in data.sheets)
            {
                foreach(var param in sheet.list)
                {
                    IDTypeBuilder.AppendLine();
                    IDTypeBuilder.AppendFormat("    {0}{1} = {2},", dataType, param.ID, param.ID);
                }
            }
            IDTypeTemplate = IDTypeTemplate.Replace("$Types$", IDTypeBuilder.ToString());
            IDTypeTemplate = IDTypeTemplate.Replace("$IDTYPE$", dataType + "IDType");

            Directory.CreateDirectory("Assets/Classes/");
            string IDTypeFileSavePath = "Assets/Classes/" + dataType + "IDType" + ".cs";
            if(File.Exists(IDTypeFileSavePath))
            {
                File.Delete(IDTypeFileSavePath);
            }
            File.WriteAllText(IDTypeFileSavePath, IDTypeTemplate);
		}
	}
}
